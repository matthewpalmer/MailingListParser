From dturnbull at gmail.com  Mon Jan 25 02:59:50 2016
From: dturnbull at gmail.com (David Turnbull)
Date: Mon, 25 Jan 2016 00:59:50 end-0800
Subject: [swift-users] Need help with compile times (type inference?)
In-Reply-To: <6DB7FDEB-7F38-47F9-84D2-F068578F3501@apple.com>
References: <CANEjtCBEpdsna8-zbU1wgNu4zOnmT5-TJoQQU8+ey_-9YeYNSw@mail.gmail.com>
<F575F007-45D1-4D42-93FB-61DBA1FFEC6D@apple.com>
<CANEjtCCHd4WPg13wtM_++i10kjHpXcF6mpkGfOZHPP1MYgO7bg@mail.gmail.com>
<71B631F2-DE83-4796-8C3B-5638191947B3@apple.com>
<CANEjtCD=WRyVHEEovsShkrtTMyg5e-94PizZ-yzTOd2M1buNZA@mail.gmail.com>
<6DB7FDEB-7F38-47F9-84D2-F068578F3501@apple.com>
Message-ID: <CANEjtCDg5mCCwB5xqvshGeLvx4wdNyZtLwN+7GLNwAqKYNhE8g@mail.gmail.com>

On Sun, Jan 24, 2016 at 9:55 PM, Chris Lattner <clattner at apple.com> wrote:

> Are you willing/able to share the code for your project?  That definitely
> sounds strange,
>

Soitenly: https://github.com/AE9RB/SwiftGL

The 28,000 lines of loader code are fine. The 6,000 lines of math libraries
are the problem.

I'm sure it's something to do with prototypes and generics. You can change
in Types.swift:
public protocol FloatingPointScalarType : ScalarType
to:
public protocol FloatingPointScalarType : ScalarType, FloatingPointType
and make the problem a bit worse. This is something I'd actually like to
use, except I don't because a few "where constraints" do what I need
without the build slowdown.

Swift 2.1 or 2.2-dev doesn't make a difference. The C++ compiler I bench
against is also llvm. The compiled binaries are truly fast (with WMO). It's
only the development process that's too slow because of build times.

-David "nyuk nyuk nyuk" Turnbull
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160125/aee0803b/attachment.html>

From v_ds_dt at 163.com  Mon Jan 25 04:34:50 2016
From: v_ds_dt at 163.com (CosynPa)
Date: Mon, 25 Jan 2016 18:34:50 +0800
Subject: [swift-users] How to express an optional is always not nil under
certain conditions
Message-ID: <56A5FA4A.5040406@163.com>

For example, I have a function that set some optional value:

func foo() {
if xxx {
switch yyy {
case .c1:
someOptional = nil
case .c2:
someOptional = 5
}
} else {
someOptional = nil
}
}

Later I want to do something with the optional value. And I know the
optional is always not nil when xxx is satisfied and yyy is in c2 case,
so I just use force unwrapping.

func bar() {
if xxx {
switch yyy {
case .c1:
doSomething1()
case .c2:
doSomethingWithValue(someOptional !)// force unwrapping, not very good
}
} else {
doSomething2()
}
}

But this is not very good, since you can't tell from the code why the
optional is not nil, and if the function foo is changed, you are not
aware of the fact that the force unwrapping is no longer valid. So is
there some better solution?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160125/8b3b2468/attachment.html>

From jon889 at me.com  Mon Jan 25 07:01:48 2016
From: jon889 at me.com (Jonathan Bailey)
Date: Mon, 25 Jan 2016 13:01:48 +0000
Subject: [swift-users] try? with a function that returns an optional
Message-ID: <2FA36C98-FBCA-4F27-9706-77DF38BF747C@me.com>

In the language guide on the apple website, https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID542

It says the following assignments to x and y are equivalent:
func someThrowingFunction() throws -> Int { ... }
let x = try? someThrowingFunction()
// x has type `Int?`

let y: Int?
do {
y = try someThrowingFunction()
} catch {
y = nil
}

However this isnâ€™t the case if someThrowingFunction also returns an optional, say:

func someThrowingFunction() throws -> Int? { ... }

The type of x would be `Int??`, but the type of y is still `Int?`, is there some way to make the `try?` return an `Int?` instead of a double optional, which is not very helpful.

Thanks,
Jonathan
